public async Task<DefaultIdType> UpdateProject(UpdateProjectRequest request, CancellationToken cancellationToken)
{
    var project = await _projectService.GetProjectById(request.ProjectId, cancellationToken);

    if (project != null)
    {
        var currentUtcTime = _currentUserTimeZone.GetUTCDateTime(DateTime.Now, cancellationToken); // Get the current UTC time
        if (currentUtcTime > project.EndTime)
        {
            // Ensure the start time is before the end time
            throw new ValidationException("Start time cannot be after end time.");
        }

        project.Update(
            projectName: request.ProjectName,
            projectDescription: request.ProjectDescription,
            startDate: currentUtcTime, // Use the current UTC time
            endDate: _currentUserTimeZone.GetUTCDateTime(Convert.ToDateTime(request.EndTime), cancellationToken),
            startTime: currentUtcTime, // Set the start time to the current UTC time
            endTime: _currentUserTimeZone.GetUTCDateTime(Convert.ToDateTime(request.EndTime), cancellationToken),
            isActive: request.IsActive);

        await _projectService.EditProject(project, cancellationToken);
    }
    else
    {
        _ = project ?? throw new NotFoundException(string.Format(_localizer["Project.notfound"], request.ProjectId));
    }

    return project.Id;
}





 public DateTime GetUTCDateTime(DateTime dateTime, CancellationToken cancellationToken)
    {
        string? timeZoneOffset = _httpContextAccessor.HttpContext!.Request.Headers["TimeZoneOffSet"].ToString();

        int offsetMinutes;

        // Try to parse the input offset string to a number (in minutes)
        if (!int.TryParse(timeZoneOffset, out offsetMinutes))
        {
            // Handle invalid input (e.g. null or non-numeric value) by using server's local time
            return dateTime;
        }

        // Calculate the offset timespan based on the input offset value
        TimeSpan offset = TimeSpan.FromMinutes(offsetMinutes);

        // Get the current local date/time
       // DateTime localDateTime = DateTime.Now;

        // Apply the offset to the local date/time to get the corresponding UTC date/time
        DateTime utcDateTime = dateTime;

        // Return the resulting UTC date/time
        return utcDateTime;
    }

