https://userapi.cqtech.in/swagger/index.html#/



{
  "projectId": "258b6076-5cf6-4be6-70f6-08dbd12d2393",
  "projectName": "test-123",
  "projectDescription": "test",
  "startDate": "2023-10-20",
  "endDate": "2023-12-31",
  "startTime": "2023-10-20 10:34:00",
  "endTime": "2023-12-31 5:35:00",
  "isActive": true
}



 [HttpPut]
    [ProducesResponseType(200)]
    [ProducesResponseType(404)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [MustHavePermission(FSHAction.Update, FSHResource.Projects)]
    [OpenApiOperation("Update a Project.", "")]
    public async Task<ActionResult<StandardApiResponse>> UpdateAsync(UpdateProjectRequest request, DefaultIdType projectId)
    {

        return projectId != request.ProjectId
            ? BadRequest()
            : Ok(await Mediator.Send(request));
    }


namespace CQ.ProjectManagement.Application.Entities.ProjectEntity.Command;
public class UpdateProjectRequest : IRequest<StandardApiResponse>
{
    /// <summary>
    /// This is ProjectId.PrimaryKey of Project Table.
    /// </summary>
    public DefaultIdType ProjectId { get; set; }

    /// <summary>
    /// This is ProjectName.
    /// </summary>
    public string ProjectName { get; set; } = default!;

    /// <summary>
    /// This is ProjectDescription.
    /// </summary>
    public string? ProjectDescription { get; set; } = default!;

    /// <summary>
    /// This is Project StartDate(yyyy-MM-dd).
    /// </summary>
    public string? StartDate { get; set; } = default!;

    /// <summary>
    /// This is Project EndDate(yyyy-MM-dd).
    /// </summary>
    public string? EndDate { get; set; } = default!;

    /// <summary>
    /// This is Project StartTime(yyyy-MM-dd HH:mm:ss).
    /// </summary>
    public string? StartTime { get; set; } = default!;

    /// <summary>
    /// This is Project EndTime(yyyy-MM-dd HH:mm:ss).
    /// </summary>
    public string? EndTime { get; set; } = default!;

    /// <summary>
    /// This is to Update Project as IsActive.
    /// </summary>
    public bool IsActive { get; set; } = false;
}

public class UpdateProjectRequestHandler : IRequestHandler<UpdateProjectRequest, StandardApiResponse>
{
    private readonly IProjectManagementService _projectManagementService;
    private readonly IStringLocalizer<UpdateProjectRequestHandler> _localizer;

    public UpdateProjectRequestHandler(IProjectManagementService projectManagementService, IStringLocalizer<UpdateProjectRequestHandler> localizer)
    {
        _projectManagementService = projectManagementService;
        _localizer = localizer;
    }

    public async Task<StandardApiResponse> Handle(UpdateProjectRequest request, CancellationToken cancellationToken)
    {
        var projectId = await _projectManagementService.UpdateProject(request, cancellationToken);
        return new StandardApiResponse(message: _localizer["Project.UpdatedSuccess", projectId], true);
    }
}



{
  "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
  "title": "One or more validation errors occurred.",
  "status": 400,
  "traceId": "00-9cb061914cc480ee46410b9155ac3e1e-4ffbdee90ab84422-00",
  "errors": {
    "EndTime": [
      "Project EndDate should be in Valid DateTIme Format",
      "Project EndDate should Not Be PastDate"
    ],
    "StartDate": [
      "Project StartDate should Not Be PastDate"
    ],
    "StartTime": [
      "Project StartDate should Not Be PastDate"
    ]
  }
}

-------------------------------------------------------------------------------------------------------
[HttpPut]
[ProducesResponseType(200)]
[ProducesResponseType(404)]
[ProducesResponseType(400)]
[ProducesResponseType(401)]
[ProducesResponseType(500)]
[MustHavePermission(FSHAction.Update, FSHResource.Projects)]
[OpenApiOperation("Update a Project.", "")]
public async Task<ActionResult<StandardApiResponse>> UpdateAsync(UpdateProjectRequest request, DefaultIdType projectId)
{
    if (projectId != request.ProjectId)
    {
        return BadRequest();
    }

    // Validate the "EndDate"
    if (!IsValidEndDate(request.EndDate))
    {
        return BadRequest("Invalid End Date");
    }

    return Ok(await Mediator.Send(request));
}

private bool IsValidEndDate(string endDate)
{
    if (DateTime.TryParse(endDate, out DateTime endDateTime))
    {
        // Check if "EndDate" is in the past
        if (endDateTime < DateTime.Now)
        {
            return false;
        }
        return true;
    }

    return false; // Invalid date format
}

-------------------------------------------------------------------------------------------------




using System;
using System.ComponentModel.DataAnnotations;

public class UpdateProjectRequest : IRequest<StandardApiResponse>
{
    // ... other properties

    [Required(ErrorMessage = "Project StartDate is required")]
    [DataType(DataType.Date, ErrorMessage = "Project StartDate should be in Valid Date Format")]
    [CustomValidationAttribute(typeof(UpdateProjectRequest), "ValidateStartDate")]
    public string? StartDate { get; set; }

    // Custom validation method
    public static ValidationResult ValidateStartDate(string? startDate, ValidationContext context)
    {
        if (startDate == null || !DateTime.TryParse(startDate, out var parsedDate))
        {
            // If it's not a valid date, the data annotation above will handle it.
            return ValidationResult.Success;
        }

        if (parsedDate < DateTime.Now.Date)
        {
            return new ValidationResult("Project StartDate should Not Be PastDate");
        }

        return ValidationResult.Success;
    }
}


{
  "projectId": "258b6076-5cf6-4be6-70f6-08dbd12d2393",
  "projectName": "test-123",
  "projectDescription": "test",
  "startDate": "2023-10-21", // A valid date in the future (not in the past)
  "endDate": "2023-12-31",   // A valid date in the future (not in the past)
  "startTime": "2023-10-21 10:34:00", // A valid date and time (not in the past)
  "endTime": "2023-12-31 5:35:00",
  "isActive": true
}



{
  "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
  "title": "One or more validation errors occurred.",
  "status": 400,
  "traceId": "00-6f5bc3bafcfbb641e5feefa0b876eea8-0db1916017787852-00",
  "errors": {
    "EndTime": [
      "Project EndDate should be in Valid DateTIme Format",
      "Project EndDate should Not Be PastDate"
    ],
    "StartDate": [
      "Project StartDate should Not Be PastDate"
    ],
    "StartTime": [
      "Project StartDate should Not Be PastDate"
    ]
  }
}


"errors": {
    "$": [
      "The JSON object contains a trailing comma at the end which is not supported in this mode. Change the reader options. Path: $ | LineNumber: 7 | BytePositionInLine: 0."
    ],
    "request": [
      "The request field is required."
    ]
