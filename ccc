public DefaultIdType UserId { get; set; } = default!;

    /// <summary>
    /// CategoryId(Last node) of Category.
    /// </summary>
    public DefaultIdType CategoryId { get; set; } = default!;
    public string CategoryName { get; set; } = default!;
    public string CategoryCode { get; set; } = default!;
    public DefaultIdType? ParentCategoryId { get; set; }





{
  "userId": "123e4567-e89b-12d3-a456-426655440000",
  "categoryId": "123e4567-e89b-12d3-a456-426655441111",
  "categoryName": "Example Category",
  "categoryCode": "ABC123",
  "parentCategoryId": "invalid-guid-string"
}

 "The JSON value could not be converted to System.Nullable`1[System.Guid]. Path: $.parentCategoryId | LineNumber: 5 | BytePositionInLine: 41."

{
  "userId": "123e4567-e89b-12d3-a456-426655440000",
  "categoryId": "123e4567-e89b-12d3-a456-426655441111",
  "categoryName": "Example Category",
  "categoryCode": "ABC123",
  "parentCategoryId": "123e4567-e89b-12d3-a456-426655442222"
}
global using DefaultIdType = global::System.Guid;
{
  "advancedSearch": {
    "fields": ["field1"],
    "keyword": "search item"
  },
  "keyword": "search item",
  "pageNumber": 10,
  "pageSize": 20,
  "orderBy": ["column1", "column2"],
  "categoryIds": [
    "e0e099d6-47c3-42a9-9c7c-9c8ebe2b3ac1",
    "9edffa86-7263-475d-b186-e568de8b6e7e"
  ]
}

SELECT TOP 1000 [Id]
      ,[UserId]
      ,[CategoryId]
      ,[CreatedBy]
      ,[CreatedOn]
      ,[LastModifiedBy]
      ,[LastModifiedOn]
      ,[DeletedOn]
      ,[DeletedBy]
      ,[CategoryCode]
      ,[CategoryName]
      ,[ParentCategoryId]
  FROM [UserAdmin].[Identity].[UserCategory]

DELETE FROM [UserAdmin].[Identity].[UserCategory]
WHERE [Id] = YourSpecificId;

 public async Task<PaginationResponse<UsersOnCategoryDto>> SearchCategoryUsersAsync(SearchUsersOnCategoryByCategoryIdRequest request, CancellationToken cancellationToken)
    {
        /*int skip = 0;
        int pageNumber = 1;
        int pageSize = 10;

        if (request.PageNumber <= 0)
        {
            pageNumber = 1;
        }
        else
        {
            pageNumber = request.PageNumber;
        }

        if (request.PageSize <= 0)
        {
            pageSize = 10;
        }
        else
        {
            pageSize = request.PageSize;
        }

        if (request.PageNumber > 1)
        {
            skip = (pageNumber - 1) * pageSize;
        }*/

        // return query
        //    .Take(filter.PageSize)
        //    .OrderBy(filter.OrderBy);

        var usersList =
            await _db.UserCategory
            .AsNoTracking()
            .Where(x => request.CategoryIds.Contains(x.CategoryId) && x.DeletedBy == null)
            .ProjectToType<UsersOnCategoryDto>()
            .GroupBy(x => x.UserId)
            .Select(x => x.First())
            .ToListAsync(cancellationToken);

        /*usersList =
              usersList
              .Take(pageSize)
              .Skip(skip);*/

        /*if (request.OrderBy != null)
        {
            if (request.OrderBy.Contains("firstname"))
            {
                usersList =
                        usersList
                        .Take(pageSize)
                        .Skip(skip)
                        .OrderBy(x => x.);
            }
        }
        else
        {
        }*/

        var user = _userManager.Users.Where(x => usersList.Select(y => y.UserId).Contains(x.Id));

        var list = usersList.Select(x => new UsersOnCategoryDto
        {
            UserId = x.UserId,
            UserName = user.Where(u => x.UserId == u.Id).Select(u => u.UserName).FirstOrDefault(),
            FirstName = user.Where(u => x.UserId == u.Id).Select(u => u.FirstName).FirstOrDefault(),
            LastName = user.Where(u => x.UserId == u.Id).Select(u => u.LastName).FirstOrDefault(),
            Email = user.Where(u => x.UserId == u.Id).Select(u => u.Email).FirstOrDefault(),
            CategoryIds = x.CategoryIds
        }).ToList();

        int usersListCount = usersList.Count();

        return new PaginationResponse<UsersOnCategoryDto>(list, usersListCount, request.PageNumber, request.PageSize);
    }

"data": [
    {
      "userId": "123E4567-E89B-12D3-A456-426655440001",
      "userName": null,
      "firstName": null,
      "lastName": null,
      "email": null,
      "categoryIds": null
    }



