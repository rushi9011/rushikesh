public async Task<PaginationResponse<UsersOnCategoryDto>> SearchCategoryUsersAsync(SearchUsersOnCategoryByCategoryIdRequest request, CancellationToken cancellationToken)
{
    var usersList =
        await _db.UserCategory
        .AsNoTracking()
        .Where(x => request.CategoryIds.Contains(x.CategoryId))
        .ProjectToType<UsersOnCategoryDto>()
        .GroupBy(x => x.UserId)
        .Select(x => x.First())
        .ToListAsync(cancellationToken);

    var user = _userManager.Users.Where(x => usersList.Select(y => y.UserId).Contains(x.Id));

    var list = usersList.Select(x => new UsersOnCategoryDto
    {
        UserId = x.UserId,
        UserName = user.Where(u => x.UserId == u.Id).Select(u => u.UserName).FirstOrDefault(),
        FirstName = user.Where(u => x.UserId == u.Id).Select(u => u.FirstName).FirstOrDefault(),
        LastName = user.Where(u => x.UserId == u.Id).Select(u => u.LastName).FirstOrDefault(),
        Email = user.Where(u => x.UserId == u.Id).Select(u => u.Email).FirstOrDefault(),
        // You can include UserCategory properties here
        UserCategoryProperty1 = x.UserCategoryProperty1,
        UserCategoryProperty2 = x.UserCategoryProperty2,
        // Add other UserCategory properties as needed
    }).ToList();

    int usersListCount = usersList.Count();

    return new PaginationResponse<UsersOnCategoryDto>(list, usersListCount, request.PageNumber, request.PageSize);
}
