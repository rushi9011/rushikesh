public async Task<PaginationResponse<UsersOnCategoryDto>> SearchCategoryUsersAsync(SearchUsersOnCategoryByCategoryIdRequest request, CancellationToken cancellationToken)
{
    var usersList =
        await _db.UserCategory
        .AsNoTracking()
        .Where(x => request.CategoryIds.Contains(x.CategoryId))
        .ProjectToType<UsersOnCategoryDto>()
        .GroupBy(x => x.UserId)
        .Select(x => x.First())
        .ToListAsync(cancellationToken);

    // Fetch user data from UserManager
    var userIds = usersList.Select(u => u.UserId).ToList();
    var users = await _userManager.Users.Where(u => userIds.Contains(u.Id)).ToListAsync();

    var list = usersList.Select(x => new UsersOnCategoryDto
    {
        UserId = x.UserId,
        UserName = users.FirstOrDefault(u => u.Id == x.UserId)?.UserName,
        FirstName = users.FirstOrDefault(u => u.Id == x.UserId)?.FirstName,
        LastName = users.FirstOrDefault(u => u.Id == x.UserId)?.LastName,
        Email = users.FirstOrDefault(u => u.Id == x.UserId)?.Email,
    }).ToList();

    int usersListCount = usersList.Count();

    return new PaginationResponse<UsersOnCategoryDto>(list, usersListCount, request.PageNumber, request.PageSize);
}
